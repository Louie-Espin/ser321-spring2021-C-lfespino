apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
   compile group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'

task runServer(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath

  main = 'taskone.Server'
  standardInput = System.in
  
  // run with arguments e.g.: gradle runServer -Pport=9099 -q --console=plain
  if (project.hasProperty('port')) {
    args(project.getProperty('port'));
  }
}

// TASK 1: Make performer more interesting
task runTask1(type: JavaExec) { // run with: gradle runTask1 -Pport=9099
    group 'server'
    description 'Task 1 - run with: gradle runTask1 -Pport=9099'
    
    classpath = sourceSets.main.runtimeClasspath
    
    main = 'taskone.Server'
    standardInput = System.in

    doFirst {
        if (project.hasProperty('port')) {
            args(port)
        } else { args(8000) } // else use port: 9099 (default)
    }
}

// TASK 2: Make the server multi-threaded
task runTask2(type: JavaExec) { // run with: gradle runTask2 -Pport=9099
    group 'server'
    description 'Task 2 - run with: gradle runTask2 -Pport=9099'
    
    classpath = sourceSets.main.runtimeClasspath
    
    main = 'tasktwo.ThreadedServer'
    standardInput = System.in

    doFirst {
        if (project.hasProperty('port')) {
            args(port)
        } else { args(8000) } // else use port: 8000 (default)
    }
}

// TASK 3: Make the multi-threaded server bounded
task runTask3(type: JavaExec) {
	group 'server'
    description 'Task 3 - run with: gradle runTask3 -Pport=9099 -Pbound=10'
    
    classpath = sourceSets.main.runtimeClasspath
    
    main = 'taskthree.ThreadedPoolServer'
    standardInput = System.in
    
    doFirst {
        if (project.hasProperty('port') && project.hasProperty('bound')) {
            args(port, bound)
        } else if (!project.hasProperty('port') && project.hasProperty('bound')) {
        	args(8000, bound)
        }
        else { args(8000, 10) } // else use port: 8000 (default)
    }
}

task runClient(type: JavaExec) {
  group 'client'
  description 'Creates client socket sends a message to the server'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in

  main = 'taskone.Client'
  standardInput = System.in
  
  // run with arguments e.g.: gradle runClient -Phost=localhost -Pport=9099 -q --console=plain
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'));
  } else { args("localhost", 8000) }
}

